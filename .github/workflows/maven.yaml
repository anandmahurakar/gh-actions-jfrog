# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: project cicd flow  

on:
  push:
    branches: [ main ] 
  pull_request:
    branches: [ main ]

jobs:
 Sonar-Scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Source code Analysis with SonarCloud         

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the   sonarcloud scanner
          args:             
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=ckorg_gh-actions-jfrog
            -Dsonar.organization=ckorg
 build-code: 
  
    runs-on: ubuntu-latest 

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'
        distribution: 'adopt'
        cache: maven
    - name: Build source code into jar file with Maven
      run: |
           mvn -B package --file pom.xml
           mkdir artifacts && cp target/*.jar artifacts
           cd artifacts && ls
    - name: Saving the artifact 
      uses: actions/upload-artifact@v2
      with:
        name: Springboot artifact
        path: artifacts
        
  Pushing-Artifact-to-Jfrog_Repo:
    name: Pushing-Artifact-to-Jfrog_Repo
    runs-on: ubuntu-latest
    needs: [build-code]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: Springboot artifact
      - run: ls
          
      - name: Setting up Jfrog-CLI
        uses: jfrog/setup-jfrog-cli@v2
      - name: Generate build number
        uses: einaregilsson/build-number@v3
        with:
          token: ${{secrets.github_token}}
      #run: jf --version
      - name: Pushing the built artifact to Jfrog repository
        run: |
             jf rt upload springboot-welcome.jar sandbox-maven-local --url=${{secrets.JF_URL}}/artifactory/ --user=${{ secrets.JF_USER }} --password=${{ secrets.JF_PASSWORD }}
             jf rt build-publish gitaction --buildname=$BUILD_NUMBER --url=${{secrets.JF_URL}}/artifactory/ --user=${{ secrets.JF_USER }} --password=${{ secrets.JF_PASSWORD }}
             jf rt bs gitaction --buildname=$BUILD_NUMBER --url=${{secrets.JF_URL}}/artifactory/ --user=${{ secrets.JF_USER }} --password=${{ secrets.JF_PASSWORD }} --fail=false
      - name: Step:6 Build & Push Docker image to JFrog-Artifact repo
        run: |
          docker login -u${{ secrets.JF_USER }} -p${{ secrets.JF_PASSWORD }} mskcc.jfrog.io
          docker build -t mskcc.jfrog.io/sandbox-docker-local/springboot-welcome:$BUILD_NUMBER .
          docker push mskcc.jfrog.io/sandbox-docker-local/springboot-welcome:$BUILD_NUMBER
